rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /products/{productID}{
      allow read;

      match /offers/{offerID}{
        allow read;
      }
    }

    match /baskets/{userID}{
      allow get: if isCurrentUser(userID);

      match /products/{productID}{
        allow read: if isCurrentUser(userID);
        allow create, update: if isCurrentUser(userID)
        && request.resource.data.productID == productID
        && isValidBasketProduct(request.resource.data);
        allow delete: if isCurrentUser(userID);
      }
    }

    // helper functions
    function isCurrentUser(userID){
      return request.auth.uid == userID;
    }

    function isValidTimestamp(timestampValue){
      return request.time == timestampValue;
    }

    function isValidBasketProduct(data){
      return isValidTimestamp(data.timestamp) 
        && (data.count > 0 && data.count < 100)
        && (data.discount == 1 || data.discount == resource.data.discount)
        && isValidPrice(data)
        && isValidBasketProductKeys(data.keys())
        && isValidOffer(data);
    }

    function isValidBasketProductKeys(keys){
      return keys.hasOnly(['timestamp', 'productID', 'price', 'count', 'discount']) 
        || keys.hasOnly(['timestamp', 'productID', 'price', 'count', 'discount', 'offerID']);
    }

    function isValidPrice(data){
      return get(/databases/$(database)/documents/products/$(data.productID)).data.price == data.price;
    }

    function isValidOffer(data){
      return !data.get('offerID', false) || exists(/databases/$(database)/documents/products/$(data.productID)/offers/$(data.offerID));
    }
  }

}